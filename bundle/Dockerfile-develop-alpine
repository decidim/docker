# #################################################
# CONTRIBUTOR; WARNING
# This file is generated by the /update script. 
# Don't edit it directly.
#
# @see /update
# #################################################
ARG BASE_IMAGE_RAILS_ENV="development"
# https://docs.docker.com/develop/develop-images/multistage-build/
# node: pre-build node at the given version (@see ARGS)
FROM node:16.20-alpine3.18 as node

# Avoid using alpine 3.16 for building seven_zip_ruby
# @see https://github.com/metanorma/packed-mn/issues/169
FROM ruby:3.0-alpine3.15 as generator
ENV BUNDLE_JOBS=8 \
    BUNDLE_RETRY=3 \
    BUNDLE_APP_CONFIG=/home/decidim/app/.bundle \
    NODE_VERSION=$NODE_VERSION \
    RUBY_VERSION=$RUBY_VERSION \
    RAILS_ENV=$BASE_IMAGE_RAILS_ENV \
    RACK_ENV=$BASE_IMAGE_RAILS_ENV \
    NODE_ENV=development \
    HOME=/home/decidim/app \
    ROOT=/home/decidim/app \
    PATH=/home/decidim/app/bin:/usr/local/bin:$PATH

# Add node binaries for precompilation 
COPY --from=node /usr/lib /usr/lib
COPY --from=node /usr/local/share /usr/local/share
COPY --from=node /usr/local/lib /usr/local/lib
COPY --from=node /usr/local/include /usr/local/include
COPY --from=node /usr/local/bin /usr/local/bin

RUN npm install -g --force yarn webpack  \
  && gem update --system \
  && apk update \
  && apk upgrade \
  # Install dependencies:
  && apk --update --no-cache add \
      # help with native gem compilation
      build-base ruby-dev alpine-sdk python3 \
      icu-dev cmake libc-dev linux-headers libxml2-dev libxslt-dev readline-dev gcc \
      # timezone management
      tzdata \
      # postgres connection
      postgresql-dev postgresql-client \
      # deps for gem charlock_holmes and nokogiri, to use system libraries
      ruby-charlock_holmes \
      ruby-nokogiri \
      # image processing
      imagemagick \
      # gem using git
      git \
      # seven_zip gem dep
      p7zip \
      # supervisord
      supervisor \
  && rm -rf /var/cache/apk/*

# Configure bundle
RUN bundle config --global build.nokogiri --use-system-libraries \
  && bundle config --global build.charlock_holmes --with-icu-dir=/usr/include

WORKDIR /home/decidim

# Run the generator
RUN gem install decidim \
  && bundle config set --global path 'vendor' \
  && decidim $HOME --queue sidekiq --edge

WORKDIR $HOME

FROM ruby:3.0-alpine3.15 as development
LABEL org.opencontainers.image.authors="hola@decidim.org"
LABEL org.opencontainers.image.vendor="Decidim"
LABEL org.opencontainers.image.title="Development images for Decidim 0.28.0.dev."
LABEL org.opencontainers.image.description="Use this images to develop/test decidim on 0.28.0.dev."
LABEL org.opencontainers.image.base.name="ruby:3.0-alpine3.15"
LABEL org.opencontainers.image.licenses="AGPL-3.0-or-later"
LABEL org.opencontainers.image.revision="103d2d3fd51dc6863947a40f2b0729ef3d0cb02d"

# Rails configuration
ENV BUNDLE_JOBS=8 \
    BUNDLE_RETRY=3 \
    BUNDLE_APP_CONFIG=/home/decidim/app/.bundle \
    EDITOR=vi \
    LANG=en_US.UTF-8 \
    TZ="Europe/Madrid" \
    NODE_VERSION=$NODE_VERSION \
    RUBY_VERSION=$RUBY_VERSION \
    RAILS_ENV=$BASE_IMAGE_RAILS_ENV \
    RACK_ENV=$BASE_IMAGE_RAILS_ENV \
    NODE_ENV=development \
    HOME=/home/decidim/app \ 
    ROOT=/home/decidim/app \ 
    PATH=/home/decidim/app/bin:/usr/local/bin:$PATH \
    PORT=3000 \
    RAILS_FORCE_SSL="false" \
    RAILS_SERVE_STATIC_FILES="false"\
    RAILS_LOG_TO_STDOUT="true"\
    RAILS_ASSET_HOST="" \
    RAILS_MAX_THREAD=5 \
    RAILS_PID_FILE="tmp/pids/server.pid" \
    RAILS_SERVE_STATIC_FILES="true" 

# supervisord configuration
ENV DECIDIM_RUN_RAILS="1" \
    DECIDIM_RUN_SIDEKIQ="1"

# Decidim configuration
ENV DECIDIM_VERSION=0.28.0.dev \
    DECIDIM_SEED="1"\
    DECIDIM_DEFAULT_LOCALE="en"\
    DECIDIM_CURRENCY_UNIT="EUR"\
    DECIDIM_LOG_LEVEL="debug"\
    DECIDIM_SYSTEM_EMAIL="hello@myorg.com"\
    DECIDIM_SYSTEM_PASSWORD="youReallyWantToChangeMe"

# Database configuration
ENV DATABASE_URL="postgres://decidim:youReallyWantToChangeMe@pg/decidim"

# Job Configuration (Sidekiq)
# WARNING: If you run an intensive instance,
# use two different redis for cache and sidekiq
# @see https://github.com/mperham/sidekiq/wiki/Using-Redis#multiple-redis-instances
ENV REDIS_URL="redis://example.com:6379/5" \
    QUEUE_ADAPTER="sidekiq" \
    SIDEKIQ_CONCURRENCY=$RAILS_MAX_THREAD

# SMTP configuration
ENV SMTP_AUTHENTICATION="plain" \
    SMTP_USERNAME="my-participatory-platform@iredmail.org" \
    SMTP_PASSWORD="youReallyWantToChangeMe" \
    SMTP_ADDRESS="smtp.iredmail.org" \
    SMTP_DOMAIN="iredmail" \
    SMTP_PORT="587" \
    SMTP_STARTTLS_AUTO="1" \
    SMTP_VERIFY_MODE="plain" 

# Add node binaries for precompilation 
COPY --from=node /usr/lib /usr/lib
COPY --from=node /usr/local/share /usr/local/share
COPY --from=node /usr/local/lib /usr/local/lib
COPY --from=node /usr/local/include /usr/local/include
COPY --from=node /usr/local/bin /usr/local/bin

RUN npm install -g --force yarn webpack  \
  && gem update --system \
  && apk update \
  && apk upgrade \
  # Install dependencies:
  && apk --update --no-cache add \
      # help with native gem compilation
      build-base ruby-dev alpine-sdk python3 \
      icu-dev cmake libc-dev linux-headers libxml2-dev libxslt-dev readline-dev gcc \
      # timezone management
      tzdata \
      # postgres connection
      postgresql-dev postgresql-client \
      # deps for gem charlock_holmes and nokogiri, to use system libraries
      ruby-charlock_holmes \
      ruby-nokogiri \
      # image processing
      imagemagick \
      # gem using git
      git \
      # seven_zip gem dep
      p7zip \ 
      # supervisord
      supervisor \
  && rm -rf /var/cache/apk/*

# Configure bundle
RUN bundle config --global build.nokogiri --use-system-libraries \
  && bundle config --global build.charlock_holmes --with-icu-dir=/usr/include

# Run the generator
COPY --from=generator $HOME $HOME

# Go in the generated decidim application. 
WORKDIR $HOME

# Prepare the decidim application, with correct ruby version, 
# and binaries
# Add all the overrides, for default configuration purpose.
COPY ./develop/ .

# Set the ruby version from the current version used.
# Useful if you eject your container and want to work without docker.
RUN echo $RUBY_VERSION > .ruby-version \
  && touch tmp/Gemfile.patch \ 
  && cat tmp/Gemfile.patch >> Gemfile \
  && bundle install
# It can be useful to have a backup of your migrations.
RUN tar cfz tmp/migrations.bak.tar.gz db/migrate \
  && rm -f ./config/credentials.yml.enc config/master.key \
  && rm -rf ./.git docker-compose-etherpad.yml docker-compose.yml Dockerfile \
  && yarn cache clean \
  && bundle clean \
  && truncate -s 0 /var/log/*log \
  && vendor_path=$(bundle show rails | sed 's/\/gems\/.*//') && rm -rf $vendor_path/cache $vendor_path/build_info $vendor_path/doc 

# Setup 7z.so seven_zip dep:
RUN mkdir -p $HOME/lib/seven_zip_ruby \
  && ln -s /usr/lib/p7zip/7z.so $HOME/lib/seven_zip_ruby/7z.so

# Prepare supervisor directories
RUN mkdir -p $ROOT/tmp/pids $ROOT/tmp/sockets
COPY ./docker/templates /usr/local/share/decidim/templates
COPY ./docker/bin /usr/local/bin/
COPY ./docker/docker-entrypoint.d /usr/local/share/docker-entrypoint.d

# Expose the rails port
EXPOSE 3000
# Define the default shell
SHELL ["/bin/sh", "-c", "set -e;"]

CMD ["bundle exec rails s"]
ENTRYPOINT ["docker-entrypoint"]
# The content above pasted from Dockerfile-develop-dev

RUN npm ci\
  && SECRET_KEY_BASE="assets" bundle exec rails assets:precompile\
  && rm -rf node_modules tmp/* .npm .gem spec test

########################################################################################
# Final image
# Get files from previous image, and prepare everything to run the 
# docker image.
########################################################################################
FROM ruby:3.0-alpine3.15
LABEL org.opencontainers.image.authors="hola@decidim.org"
LABEL org.opencontainers.image.vendor="Decidim"
LABEL org.opencontainers.image.title="Decidim 0.28.0.dev on docker."
LABEL org.opencontainers.image.description="Decidim instance on Docker, usable in production"
LABEL org.opencontainers.image.base.name="ruby:3.0-alpine3.15"
LABEL org.opencontainers.image.licenses="AGPL-3.0-or-later"
LABEL org.opencontainers.image.revision="103d2d3fd51dc6863947a40f2b0729ef3d0cb02d"

# Rails configuration
ENV BUNDLE_JOBS=8\
    BUNDLE_RETRY=3\
    BUNDLE_APP_CONFIG=/home/decidim/app/.bundle\
    EDITOR=vi\
    LANG=en_US.UTF-8\
    TZ="Europe/Madrid"\
    NODE_VERSION=$NODE_VERSION\
    RUBY_VERSION=$RUBY_VERSION\
    RAILS_ENV=production\
    RACK_ENV=production\
    NODE_ENV=production\
    HOME=/home/decidim/app\
    ROOT=/home/decidim/app\
    PATH=/home/decidim/app/bin:/usr/local/bin:$PATH\
    PORT=3000\
    RAILS_FORCE_SSL="false"\
    RAILS_SERVE_STATIC_FILES="false"\
    RAILS_LOG_TO_STDOUT="true"\
    RAILS_ASSET_HOST=""\
    RAILS_MAX_THREAD=5\
    RAILS_PID_FILE="tmp/pids/server.pid"\
    RAILS_SERVE_STATIC_FILES="disabled"\
    RAILS_MASTER_KEY="youReallyWantToChangeMe"\
    SECRET_KEY_BASE="youReallyWantToChangeMe"

# supervisord configuration
ENV DECIDIM_RUN_RAILS="1"\
    DECIDIM_RUN_SIDEKIQ="1"\
    DECIDIM_RUN_CRON="1"

# Decidim configuration
ENV DECIDIM_VERSION=0.28.0.dev\
    DECIDIM_SEED="1"\
    DECIDIM_DEFAULT_LOCALE="en"\
    DECIDIM_CURRENCY_UNIT="EUR"\
    DECIDIM_LOG_LEVEL="warn"\
    DECIDIM_SYSTEM_EMAIL="hello@myorg.com"\
    DECIDIM_SYSTEM_PASSWORD="youReallyWantToChangeMe"

# Database configuration
ENV DATABASE_URL="postgres://decidim:youReallyWantToChangeMe@pg/decidim"

# Job Configuration (Sidekiq)
# WARNING: If you run an intensive instance,
# use two different redis for cache and sidekiq
# @see https://github.com/mperham/sidekiq/wiki/Using-Redis#multiple-redis-instances
ENV REDIS_URL="redis://example.com:6379/5"\
    QUEUE_ADAPTER="sidekiq"\
    SIDEKIQ_CONCURRENCY=$RAILS_MAX_THREAD

# SMTP configuration
ENV SMTP_AUTHENTICATION="plain"\
    SMTP_USERNAME="my-participatory-platform@iredmail.org"\
    SMTP_PASSWORD="youReallyWantToChangeMe"\
    SMTP_ADDRESS="smtp.iredmail.org"\
    SMTP_DOMAIN="iredmail"\
    SMTP_PORT="587"\
    SMTP_STARTTLS_AUTO="1"\
    SMTP_VERIFY_MODE="plain"

RUN gem update --system\
  && apk update\
  && apk upgrade\
  && gem install bundler --silent\
  # Install dependencies:
  && apk --update --no-cache add\
    # nokogiri native deps (don't need full ruby-nokogiri, just these headers)
    libxslt-dev\
    # manage timezones
    tzdata\
    # communicate with postgres through the postgres gem
    postgresql-dev\
    # for image processing
    imagemagick\
    # allows gem to use git
    git\
    # seven_zip gem dep
    p7zip\
     # supervisord
    supervisor\
  && rm -rf /var/cache/apk/*\
  # Remove default supervisord configuration
  && rm /etc/supervisord.conf\
  # Link logs to common alpine log directory
  && mkdir -p $HOME/log\
  && truncate -s 0 /var/log/*log

# Setup templates, will be used at runtime on container initialization
COPY ./docker/templates /usr/local/share/decidim/templates

# Setup volumes before copying, to avoid data-loss on binding
VOLUME $HOME/public
VOLUME $HOME/config
VOLUME $HOME/app
VOLUME $HOME/log
VOLUME $HOME/storage

# Add binaries, to start the container
COPY ./docker/bin /usr/local/bin/
COPY ./docker/docker-entrypoint.d /usr/local/share/docker-entrypoint.d
COPY ./docker/crontab.d /etc/periodic/


COPY --from=development $HOME $HOME

WORKDIR $HOME

# Set the config again, the same as the previous image, 
# to to avoid rebuilding native extensions.
RUN bundle config set --global without 'development:test'\
  && bundle config set --global path 'vendor'\
  && bundle config --global build.nokogiri --use-system-libraries\
  && bundle config --global build.charlock_holmes --with-icu-dir=/usr/include 

# Expose the rails port
EXPOSE 3000

# Define the default shell
SHELL ["/bin/sh", "-c", "set -e;"]

CMD ["start"]
ENTRYPOINT ["docker-entrypoint"]